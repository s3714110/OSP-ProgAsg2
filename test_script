#!/bin/bash

#This script will test VSFS program

readonly VSFS=./VSFS
status=$?

#error codes
EX_USAGE=64
EX_DATAERR=65
EX_CANTCREAT=73
EX_SOFTWARE=70

init_test() {

    make clean

    make
}

clean_up() {

    make clean
}

exit_code_missing_arguments() {
    echo "Checking for EX_USAGE exit codes when there is no arguments..."
    $VSFS
    status=$?
    if [[ $status -eq $EX_USAGE ]]
    then
        echo "Correct exit code for missing arguments"
    else
        echo "Incorrect exit code for missing arguments" 
        exit 1
    fi

    echo "Checking for EX_USAGE exit codes when there is only 1 arguments..."
    $VSFS oneargument
    status=$?
    if [[ $status -eq $EX_USAGE ]]
    then
        echo "Correct exit code for missing arguments"
    else
        echo "Incorrect exit code for missing arguments" 
        exit 1
    fi

}

exit_code_invalid_filename(){
    echo "Checking for EX_DATAERR exit codes when filename is ends with /..."
    $VSFS list invalid/
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid file name"
    else
        echo "Incorrect exit code for invalid file name" 
        exit 1
    fi

    echo "Checking for EX_DATAERR exit codes when filename is only . ..."
    $VSFS list .
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid file name"
    else
        echo "Incorrect exit code for invalid file name" 
        exit 1
    fi

    echo "Checking for EX_DATAERR exit codes when filename is only .. ..."
    $VSFS list ..
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid file name"
    else
        echo "Incorrect exit code for invalid file name" 
        exit 1
    fi

    echo "Checking for EX_DATAERR exit codes when filename is only / ..."
    $VSFS list ..
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid file name"
    else
        echo "Incorrect exit code for invalid file name" 
        exit 1
    fi
}

exit_code_cant_create_directory()
{
    echo "Checking for EX_CANTCREAT exit codes when program cant create directory /..."
    $VSFS list /this_is_root/test
    status=$?
    if [[ $status -eq $EX_CANTCREAT ]]
    then
        echo "Correct exit code for not able to create directory"
    else
        echo "Incorrect exit code for not able to create directory" 
        exit 1
    fi
}

exit_code_gzip_fail()
{
    echo "Checking for EX_SOFTWARE exit codes when gzip or gunzip cant find file /..."
    rm -f not_exist.notes.gz
    $VSFS list not_exist.notes.gz
    status=$?
    if [[ $status -eq $EX_SOFTWARE ]]
    then
        echo "Correct exit code for gzip cant find file"
    else
        echo "Incorrect exit code for gzip cant find file" 
        exit 1
    fi

    echo "Checking for EX_SOFTWARE exit codes when gzip or gunzip uses invalid file format /..."
    $VSFS list test/dummy.notes.gz
    status=$?
    if [[ $status -eq $EX_SOFTWARE ]]
    then
        echo "Correct exit code for gzip uses invalid file format "
    else
        echo "Incorrect exit code for gzip uses invalid file format e" 
        exit 1
    fi

}

exit_code_invalid_arguments()
{
    echo "Checking for EX_USAGE exit codes when there are 2 arguments for list..."
    $VSFS list nonsense nonesense
    status=$?
    if [[ $status -eq $EX_USAGE ]]
    then
        echo "Correct exit code for invalid arguments"
    else
        echo "Incorrect exit code for invalid arguments" 
        exit 1
    fi

    echo "Checking for EX_USAGE exit codes when the option argument is wrong..."
    $VSFS thisisnotanoption nonsense nonesense
    status=$?
    if [[ $status -eq $EX_USAGE ]]
    then
        echo "Correct exit code for invalid arguments"
    else
        echo "Incorrect exit code for invalid arguments" 
        exit 1
    fi
}

test_for_invalid_fs()
{
    echo "Checking for EX_DATAERR exit codes when supplied in invalid notes file with duplicate name..."
    $VSFS list test/invalid.notes
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid notes file with duplicate name"
    else
        echo "Incorrect exit code for invalid notes file with duplicate name" 
        exit 1
    fi

    echo "Checking for EX_DATAERR exit codes when supplied in invalid notes file with invalid dir path..."
    $VSFS list test/invalid2.notes
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid notes file with invalid dir path"
    else
        echo "Incorrect exit code for invalid notes file with invalid dir path" 
        exit 1
    fi

    echo "Checking for EX_DATAERR exit codes when supplied in invalid notes file with invalid file content..."
    $VSFS list test/invalid3.notes
    status=$?
    if [[ $status -eq $EX_DATAERR ]]
    then
        echo "Correct exit code for invalid notes file with invalid file content"
    else
        echo "Incorrect exit code for invalid notes file with invalid file content" 
        exit 1
    fi
}

check_copyin_results()
{
    cp -f test/test_copy/copy_in_image_before.notes test/test_copy/copy_in_image.notes
    echo "Checking the .notes file after copying in an image..."
    $VSFS copyin test/test_copy/copy_in_image.notes test/test_image testdir/testimage

    if cmp -s "test/test_copy/copy_in_image.notes" "test/test_copy/copy_in_image_expected.notes"
    then
        echo "The filesystem after copyin is as expected"
    else
        echo "The filesystem after copyin is not correct"
        exit 1
    fi

    rm -f test/test_copy/copy_in_image.notes

    cp -f test/test_copy/copy_in_text_before.notes test/test_copy/copy_in_text.notes
    echo "Checking the .notes file after copying in a text file..."
    $VSFS copyin test/test_copy/copy_in_text.notes test/test_text testdir/testtext

    if cmp -s "test/test_copy/copy_in_text.notes" "test/test_copy/copy_in_text_expected.notes"
    then
        echo "The filesystem after copyin is as expected"
    else
        echo "The filesystem after copyin is not correct"
        exit 1
    fi

    rm -f test/test_copy/copy_in_text.notes
}

check_copyout_results()
{
    echo "Checking the external image file after being copied out if file system..."
    $VSFS copyout test/test.notes testdir/testimage test/test_image_out

    if cmp -s "test/test_image_out" "test/test_image" 
    then
        echo "The image file after being copied out is the same as before"
    else
        echo "The image file after being copied out is corrupted"
        exit 1
    fi
    rm -f test/test_image_out
}

init_test
exit_code_missing_arguments
exit_code_invalid_filename
exit_code_cant_create_directory
exit_code_gzip_fail
exit_code_invalid_arguments
test_for_invalid_fs
check_copyin_results
check_copyout_results
echo "All tests passed!"
clean_up
